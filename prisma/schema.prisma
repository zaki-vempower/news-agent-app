// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials-based authentication
  accounts      Account[]
  sessions      Session[]
  savedArticles SavedArticle[]
  chatSessions  ChatSession[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Existing models updated with user relations
model NewsArticle {
  id          String   @id @default(cuid())
  title       String
  summary     String?
  content     String
  url         String   @unique
  imageUrl    String?
  source      String
  category    String?
  publishedAt DateTime
  scrapedAt   DateTime @default(now())
  savedArticles SavedArticle[]
  
  @@map("news_articles")
}

model SavedArticle {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  savedAt   DateTime @default(now())
  notes     String?
  
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  article NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, articleId])
  @@map("saved_articles")
}

model ChatSession {
  id          String   @id @default(cuid())
  userId      String
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
  
  @@map("chat_sessions")
}

model ChatMessage {
  id            String   @id @default(cuid())
  sessionId     String
  content       String
  isUser        Boolean
  timestamp     DateTime @default(now())
  
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}
